trigger:
- none

resources:
- repo: self

variables:
  imageRepository: 'amimagescantrivy'
  containerRegistry: 'formytrivytesting.azurecr.io'
  storageaccount: 'mytrivytesting'
  resourcegroup: 'Feb18'
  sacontainername: 'trivy-scan-reports1'
  serviceconn: 'Trivy-ACR-Serviceconnection' 
  target: $(build.artifactstagingdirectory)
  artifact: AM
  tag: '$(Build.BuildId)'
  trivyVersion: '0.23.0'

  vmImageName: 'ubuntu-latest'

stages:
- stage: BUILD
  displayName: Build and Push Stage
  jobs:
  - job: BUILD_JOB
    displayName: BUILD IMAGE
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: Docker@2
      displayName: BUILD AND PUSH IMAGE TO ACR
      inputs:
        containerRegistry: 'Trivy-ACR-Serviceconnection'
        repository: '$(imageRepository)'
        command: 'buildandpush'
        Dockerfile: '**/Dockerfile'
        tags: '$(tag)'

######### Download and Install Aquasec Trivy:-
    - script: |
        sudo apt-get install rpm
        wget https://github.com/aquasecurity/trivy/releases/download/v$(trivyVersion)/trivy_$(trivyVersion)_Linux-64bit.deb
        sudo dpkg -i trivy_$(trivyVersion)_Linux-64bit.deb
        trivy -v
      displayName: 'Download and install Trivy'

########## Execute Trivy Scan and Copy the Scan Results in Artifacts Staging Directory:-
    - task: CmdLine@2
      displayName: RUN AQUASEC TRIVY SCAN AND COPY TO ARTIFACTS STAGING DIRECTORY
      inputs:
        script: |
          svn export https://github.com/aquasecurity/trivy.git/trunk/contrib contrib
          ls
          pwd
          trivy image --severity LOW,MEDIUM --format template --template "@contrib/junit.tpl" -o junit-report-low-med.xml $(containerRegistry)/$(imageRepository):$(tag)
          trivy image --severity HIGH,CRITICAL --format template --template "@contrib/junit.tpl" -o junit-report-high-crit.xml $(containerRegistry)/$(imageRepository):$(tag)

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report-low-med.xml'
        mergeTestResults: true
        failTaskOnFailedTests: false
        testRunTitle: 'Trivy - Low and Medium Vulnerabilities'
      condition: 'always()'
      continueOnError: true

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/junit-report-high-crit.xml'
        mergeTestResults: true
        failTaskOnFailedTests: true
        testRunTitle: 'Trivy - High and Critical Vulnerabilities'
      condition: 'always()'
      continueOnError: true